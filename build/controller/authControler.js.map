{"version":3,"sources":["../../src/controller/authControler.js"],"names":["Signup","req","res","body","email","name","password","about","image","file","status","json","data","errors","value","path","msg","param","location","size","console","log","userSchema","find","user","length","message","hashPassword","save","Login","findOne","matchPassword","bcrypt","compareSync","params","token","jwt","sign","id","_id","process","env","jwt_secret","expiresIn","Profile","err"],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt\";\nimport fetch from \"node-fetch\";\nimport jwt from \"jsonwebtoken\";\nimport userSchema from \"../models/schemas/userSchema\";\nimport { hash } from \"../utils/hashPass\";\n\nexport const Signup = async (req, res) => {\n  try {\n    const { email, name, password, about } = req.body;\n    const image = req.file;\n    if (!image) {\n      return res.status(400).json({\n        data: {},\n        errors: [\n          {\n            value: req.file.path,\n            msg: \"image field cannot be empty\",\n            param: \"image\",\n            location: \"file\",\n          },\n        ],\n      });\n    }\n    if (image.size > 500000) {\n      console.log(image.size);\n      return res.status(400).json({\n        data: {},\n        errors: [\n          {\n            value: req.file.size,\n            msg: \"image size must be less then 500kb\",\n            param: \"image\",\n            location: \"file\",\n          },\n        ],\n      });\n    }\n    let user = await userSchema.find({ email: email });\n    if (user.length) {\n      return res.status(400).json({\n        data: {},\n        errors: [\n          {\n            value: req.body.email,\n            msg: \"User already exists.\",\n            param: \"email\",\n            location: \"body\",\n          },\n        ],\n        message: \"Unable to create user\",\n      });\n    }\n\n    const hashPassword = await hash(password, 10);\n    user = new userSchema({\n      email,\n      name,\n      about,\n      image: image.path,\n      password: hashPassword,\n    });\n    await user.save();\n    res.status(200).json({\n      data: {},\n      errors: [],\n      message: \"Signed Up successfully!!\",\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const Login = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await userSchema.findOne({ email: email });\n    if (!user) {\n      return res.status(400).json({\n        data: {},\n        errors: [\n          {\n            value: email,\n            msg: \"User not exist.\",\n            param: \"email\",\n            location: \"body\",\n          },\n        ],\n        message: \"Invalid credentials\",\n      });\n    }\n\n    const matchPassword = bcrypt.compareSync(password, user.password);\n    if (!matchPassword) {\n      return res.status(400).json({\n        data: {},\n        errors: [\n          {\n            value: password,\n            msg: \"Invalid password !\",\n            params: \"password\",\n            location: \"body\",\n          },\n        ],\n        message: \"Invalid credentials\",\n      });\n    } else {\n      const token = jwt.sign({ id: user._id }, process.env.jwt_secret, {\n        expiresIn: \"1d\",\n      });\n      res.status(200).json({\n        data: { token },\n        errors: [],\n        message: \"Login successfully!\",\n      });\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const Profile = async (req, res) => {\n  const { name, email, about, image } = req.user;\n  // console.log(image);\n  try {\n    res.status(200).json({\n      data: { name, email, about, image },\n      errors: [],\n      message: \"Fetched data form user\",\n    });\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n"],"file":"authControler.js"}